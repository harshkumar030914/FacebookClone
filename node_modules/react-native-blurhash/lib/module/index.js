function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import { requireNativeComponent, NativeModules, Platform } from 'react-native';
import { decode83, decodeDC, isBlurhashValid } from './utils'; // NativeModules automatically resolves 'BlurhashView' to 'BlurhashViewModule'

const BlurhashModule = NativeModules.BlurhashView;
export class Blurhash extends React.PureComponent {
  constructor(props) {
    super(props);
    this._onLoadStart = this._onLoadStart.bind(this);
    this._onLoadEnd = this._onLoadEnd.bind(this);
    this._onLoadError = this._onLoadError.bind(this);
  }
  /**
   * Encodes the given image URI to a blurhash string
   * @param imageUri An URI to an Image parseable by the react native image loader
   * @param componentsX The number of X components
   * @param componentsY The number of Y components
   * @example
   * const blurhash = await Blurhash.encode('https://blurha.sh/assets/images/img2.jpg')
   */


  static encode(imageUri, componentsX, componentsY) {
    if (typeof imageUri !== 'string') throw new Error('imageUri must be a non-empty string!');
    if (typeof componentsX !== 'number') throw new Error('componentsX must be a valid positive number!');
    if (typeof componentsY !== 'number') throw new Error('componentsY must be a valid positive number!');
    return BlurhashModule.createBlurhashFromImage(imageUri, componentsX, componentsY);
  }
  /**
   * Gets the average color in a given blurhash string.
   *
   * This uses the JS blurhash decoder, so it might be slow.
   * @param blurhash The blurhash string
   * @example
   * const averageColor = Blurhash.getAverageColor(`LGFFaXYk^6#M@-5c,1J5@[or[Q6.`)
   */


  static getAverageColor(blurhash) {
    if (blurhash == null || blurhash.length < 7) return undefined;
    const value = decode83(blurhash.substring(2, 6));
    return decodeDC(value);
  }
  /**
   * Clears the cosine cache and frees up memory.
   *
   * @platform Android
   * @see https://github.com/mrousavy/react-native-blurhash#cosine-operations
   */


  static clearCosineCache() {
    if (Platform.OS === 'android') BlurhashModule.clearCosineCache();else console.warn('Blurhash.clearCosineCache is only available on Android.');
  }
  /**
   * Verifies if the given blurhash is valid by checking it's type, length and size flag.
   *
   * This uses the JS blurhash decoder, so it might be slow.
   * @param blurhash The given blurhash string
   */


  static isBlurhashValid(blurhash) {
    return isBlurhashValid(blurhash);
  }

  _onLoadStart() {
    if (this.props.onLoadStart != null) this.props.onLoadStart();
  }

  _onLoadEnd() {
    if (this.props.onLoadEnd != null) this.props.onLoadEnd();
  }

  _onLoadError(event) {
    var _event$nativeEvent;

    if (this.props.onLoadError != null) this.props.onLoadError(event === null || event === void 0 ? void 0 : (_event$nativeEvent = event.nativeEvent) === null || _event$nativeEvent === void 0 ? void 0 : _event$nativeEvent.message);
  }

  render() {
    return /*#__PURE__*/React.createElement(NativeBlurhashView, _extends({}, this.props, {
      onLoadStart: this._onLoadStart,
      onLoadEnd: this._onLoadEnd // @ts-expect-error
      ,
      onLoadError: this._onLoadError
    }));
  }

} // requireNativeComponent automatically resolves 'BlurhashView' to 'BlurhashViewManager'

_defineProperty(Blurhash, "displayName", 'Blurhash');

const NativeBlurhashView = requireNativeComponent('BlurhashView', // @ts-expect-error this second argument is still not public, but probably required for TurboModules.
Blurhash);
//# sourceMappingURL=index.js.map