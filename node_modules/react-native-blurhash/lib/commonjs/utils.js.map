{"version":3,"sources":["utils.ts"],"names":["sRGBToLinear","value","v","Math","pow","decodeDC","intR","intG","intB","r","g","b","decode83","str","i","length","c","digit","digitCharacters","indexOf","validateBlurhash","blurhash","Error","sizeFlag","numY","floor","numX","isBlurhashValid","error","message","JSON","stringify","isValid","errorReason"],"mappings":"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","sourcesContent":["// Some functions from the Blurhash JS implementation that are used for light tasks (such as getting the average color or validating if a blurhash string is valid)\n\nexport interface RGB {\n\t/**\n\t * The Red value component of this RGB instance. Ranges from 0 to 255.\n\t */\n\tr: number;\n\t/**\n\t * The Green value component of this RGB instance. Ranges from 0 to 255.\n\t */\n\tg: number;\n\t/**\n\t * The Blue value component of this RGB instance. Ranges from 0 to 255.\n\t */\n\tb: number;\n}\n\nfunction sRGBToLinear(value: number): number {\n\tconst v = value / 255;\n\tif (v <= 0.04045) return v / 12.92;\n\telse return Math.pow((v + 0.055) / 1.055, 2.4);\n}\n\nexport function decodeDC(value: number): RGB {\n\tconst intR = value >> 16;\n\tconst intG = (value >> 8) & 255;\n\tconst intB = value & 255;\n\treturn { r: sRGBToLinear(intR) * 255, g: sRGBToLinear(intG) * 255, b: sRGBToLinear(intB) * 255 };\n}\n\nexport function decode83(str: string): number {\n\tlet value = 0;\n\tfor (let i = 0; i < str.length; i++) {\n\t\tconst c = str[i];\n\t\tconst digit = digitCharacters.indexOf(c);\n\t\tvalue = value * 83 + digit;\n\t}\n\treturn value;\n}\n\nfunction validateBlurhash(blurhash: string): void {\n\tif (!blurhash || blurhash.length < 6) throw new Error('The blurhash string must be at least 6 characters');\n\n\tconst sizeFlag = decode83(blurhash[0]);\n\tconst numY = Math.floor(sizeFlag / 9) + 1;\n\tconst numX = (sizeFlag % 9) + 1;\n\n\tif (blurhash.length !== 4 + 2 * numX * numY)\n\t\tthrow new Error(`blurhash length mismatch: length is ${blurhash.length} but it should be ${4 + 2 * numX * numY}`);\n}\n\nexport function isBlurhashValid(blurhash: string): { isValid: true } | { isValid: false; errorReason: string } {\n\ttry {\n\t\tvalidateBlurhash(blurhash);\n\t} catch (error) {\n\t\tconst message = error instanceof Error ? error.message : JSON.stringify(error);\n\t\treturn { isValid: false, errorReason: message };\n\t}\n\n\treturn { isValid: true };\n}\n\nconst digitCharacters = [\n\t'0',\n\t'1',\n\t'2',\n\t'3',\n\t'4',\n\t'5',\n\t'6',\n\t'7',\n\t'8',\n\t'9',\n\t'A',\n\t'B',\n\t'C',\n\t'D',\n\t'E',\n\t'F',\n\t'G',\n\t'H',\n\t'I',\n\t'J',\n\t'K',\n\t'L',\n\t'M',\n\t'N',\n\t'O',\n\t'P',\n\t'Q',\n\t'R',\n\t'S',\n\t'T',\n\t'U',\n\t'V',\n\t'W',\n\t'X',\n\t'Y',\n\t'Z',\n\t'a',\n\t'b',\n\t'c',\n\t'd',\n\t'e',\n\t'f',\n\t'g',\n\t'h',\n\t'i',\n\t'j',\n\t'k',\n\t'l',\n\t'm',\n\t'n',\n\t'o',\n\t'p',\n\t'q',\n\t'r',\n\t's',\n\t't',\n\t'u',\n\t'v',\n\t'w',\n\t'x',\n\t'y',\n\t'z',\n\t'#',\n\t'$',\n\t'%',\n\t'*',\n\t'+',\n\t',',\n\t'-',\n\t'.',\n\t':',\n\t';',\n\t'=',\n\t'?',\n\t'@',\n\t'[',\n\t']',\n\t'^',\n\t'_',\n\t'{',\n\t'|',\n\t'}',\n\t'~',\n];\n"]}