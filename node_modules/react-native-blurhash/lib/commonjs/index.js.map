{"version":3,"sources":["index.tsx"],"names":["BlurhashModule","NativeModules","BlurhashView","Blurhash","React","PureComponent","constructor","props","_onLoadStart","bind","_onLoadEnd","_onLoadError","encode","imageUri","componentsX","componentsY","Error","createBlurhashFromImage","getAverageColor","blurhash","length","undefined","value","substring","clearCosineCache","Platform","OS","console","warn","isBlurhashValid","onLoadStart","onLoadEnd","event","onLoadError","nativeEvent","message","render","NativeBlurhashView"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;AAEA;AACA,MAAMA,cAAc,GAAGC,2BAAcC,YAArC;;AAmDO,MAAMC,QAAN,SAAuBC,KAAK,CAACC,aAA7B,CAA0D;AAGhEC,EAAAA,WAAW,CAACC,KAAD,EAAuB;AACjC,UAAMA,KAAN;AACA,SAAKC,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKC,UAAL,GAAkB,KAAKA,UAAL,CAAgBD,IAAhB,CAAqB,IAArB,CAAlB;AACA,SAAKE,YAAL,GAAoB,KAAKA,YAAL,CAAkBF,IAAlB,CAAuB,IAAvB,CAApB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACc,SAANG,MAAM,CAACC,QAAD,EAAmBC,WAAnB,EAAwCC,WAAxC,EAA8E;AAC1F,QAAI,OAAOF,QAAP,KAAoB,QAAxB,EAAkC,MAAM,IAAIG,KAAJ,CAAU,sCAAV,CAAN;AAClC,QAAI,OAAOF,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAIE,KAAJ,CAAU,8CAAV,CAAN;AACrC,QAAI,OAAOD,WAAP,KAAuB,QAA3B,EAAqC,MAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AAErC,WAAOhB,cAAc,CAACiB,uBAAf,CAAuCJ,QAAvC,EAAiDC,WAAjD,EAA8DC,WAA9D,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AACuB,SAAfG,eAAe,CAACC,QAAD,EAAoC;AACzD,QAAIA,QAAQ,IAAI,IAAZ,IAAoBA,QAAQ,CAACC,MAAT,GAAkB,CAA1C,EAA6C,OAAOC,SAAP;AAE7C,UAAMC,KAAK,GAAG,qBAASH,QAAQ,CAACI,SAAT,CAAmB,CAAnB,EAAsB,CAAtB,CAAT,CAAd;AACA,WAAO,qBAASD,KAAT,CAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;;;AACwB,SAAhBE,gBAAgB,GAAS;AAC/B,QAAIC,sBAASC,EAAT,KAAgB,SAApB,EAA+B1B,cAAc,CAACwB,gBAAf,GAA/B,KACKG,OAAO,CAACC,IAAR,CAAa,yDAAb;AACL;AAED;AACD;AACA;AACA;AACA;AACA;;;AACuB,SAAfC,eAAe,CAACV,QAAD,EAAuD;AAC5E,WAAO,4BAAgBA,QAAhB,CAAP;AACA;;AAEDX,EAAAA,YAAY,GAAG;AACd,QAAI,KAAKD,KAAL,CAAWuB,WAAX,IAA0B,IAA9B,EAAoC,KAAKvB,KAAL,CAAWuB,WAAX;AACpC;;AACDpB,EAAAA,UAAU,GAAG;AACZ,QAAI,KAAKH,KAAL,CAAWwB,SAAX,IAAwB,IAA5B,EAAkC,KAAKxB,KAAL,CAAWwB,SAAX;AAClC;;AACDpB,EAAAA,YAAY,CAACqB,KAAD,EAAqD;AAAA;;AAChE,QAAI,KAAKzB,KAAL,CAAW0B,WAAX,IAA0B,IAA9B,EAAoC,KAAK1B,KAAL,CAAW0B,WAAX,CAAuBD,KAAvB,aAAuBA,KAAvB,6CAAuBA,KAAK,CAAEE,WAA9B,uDAAuB,mBAAoBC,OAA3C;AACpC;;AAEDC,EAAAA,MAAM,GAAG;AACR,wBACC,oBAAC,kBAAD,eACK,KAAK7B,KADV;AAEC,MAAA,WAAW,EAAE,KAAKC,YAFnB;AAGC,MAAA,SAAS,EAAE,KAAKE,UAHjB,CAIC;AAJD;AAKC,MAAA,WAAW,EAAE,KAAKC;AALnB,OADD;AASA;;AAlF+D,C,CAqFjE;;;;;gBArFaR,Q,iBACS,U;;AAqFtB,MAAMkC,kBAAkB,GAAG,yCAC1B,cAD0B,EAE1B;AACAlC,QAH0B,CAA3B","sourcesContent":["import * as React from 'react';\nimport { requireNativeComponent, NativeModules, Platform, ViewProps, NativeSyntheticEvent } from 'react-native';\nimport { decode83, decodeDC, isBlurhashValid, RGB } from './utils';\n\n// NativeModules automatically resolves 'BlurhashView' to 'BlurhashViewModule'\nconst BlurhashModule = NativeModules.BlurhashView;\n\nexport interface BlurhashProps extends Omit<ViewProps, 'children'> {\n\t/**\n\t * The blurhash string to use. Example: `LGFFaXYk^6#M@-5c,1J5@[or[Q6`.\n\t */\n\tblurhash: string;\n\t/**\n\t * The width (resolution) to decode to. Higher values decrease performance, use `16` for large lists, otherwise you can increase it to `32`.\n\t * @default 32\n\t */\n\tdecodeWidth?: number;\n\t/**\n\t * The height (resolution) to decode to. Higher values decrease performance, use `16` for large lists, otherwise you can increase it to `32`.\n\t * @default 32\n\t */\n\tdecodeHeight?: number;\n\t/**\n\t * Adjusts the contrast of the output image. Tweak it if you want a different look for your placeholders.\n\t * @default 1.0\n\t */\n\tdecodePunch?: number;\n\t/**\n\t * Asynchronously decode the Blurhash on a background Thread instead of the UI-Thread.\n\t * Read the [performance documentation](https://github.com/mrousavy/react-native-blurhash#performance)\n\t * before enabling this.\n\t * @default false\n\t */\n\tdecodeAsync?: boolean;\n\t/**\n\t * Adjusts the resize mode of the image.\n\t * @default 'cover'\n\t */\n\tresizeMode?: 'cover' | 'contain' | 'stretch' | 'center';\n\n\t/**\n\t * Emitted when the Blurhash received new parameters and started to decode the given `blurhash` string.\n\t */\n\tonLoadStart?: () => void;\n\n\t/**\n\t * Emitted when the Blurhash successfully decoded the given `blurhash` string and rendered the image to the `<Blurhash>` view.\n\t */\n\tonLoadEnd?: () => void;\n\n\t/**\n\t * Emitted when the Blurhash failed to decode/load.\n\t */\n\tonLoadError?: (message?: string) => void;\n}\n\nexport class Blurhash extends React.PureComponent<BlurhashProps> {\n\tstatic displayName = 'Blurhash';\n\n\tconstructor(props: BlurhashProps) {\n\t\tsuper(props);\n\t\tthis._onLoadStart = this._onLoadStart.bind(this);\n\t\tthis._onLoadEnd = this._onLoadEnd.bind(this);\n\t\tthis._onLoadError = this._onLoadError.bind(this);\n\t}\n\n\t/**\n\t * Encodes the given image URI to a blurhash string\n\t * @param imageUri An URI to an Image parseable by the react native image loader\n\t * @param componentsX The number of X components\n\t * @param componentsY The number of Y components\n\t * @example\n\t * const blurhash = await Blurhash.encode('https://blurha.sh/assets/images/img2.jpg')\n\t */\n\tstatic encode(imageUri: string, componentsX: number, componentsY: number): Promise<string> {\n\t\tif (typeof imageUri !== 'string') throw new Error('imageUri must be a non-empty string!');\n\t\tif (typeof componentsX !== 'number') throw new Error('componentsX must be a valid positive number!');\n\t\tif (typeof componentsY !== 'number') throw new Error('componentsY must be a valid positive number!');\n\n\t\treturn BlurhashModule.createBlurhashFromImage(imageUri, componentsX, componentsY);\n\t}\n\n\t/**\n\t * Gets the average color in a given blurhash string.\n\t *\n\t * This uses the JS blurhash decoder, so it might be slow.\n\t * @param blurhash The blurhash string\n\t * @example\n\t * const averageColor = Blurhash.getAverageColor(`LGFFaXYk^6#M@-5c,1J5@[or[Q6.`)\n\t */\n\tstatic getAverageColor(blurhash: string): RGB | undefined {\n\t\tif (blurhash == null || blurhash.length < 7) return undefined;\n\n\t\tconst value = decode83(blurhash.substring(2, 6));\n\t\treturn decodeDC(value);\n\t}\n\n\t/**\n\t * Clears the cosine cache and frees up memory.\n\t *\n\t * @platform Android\n\t * @see https://github.com/mrousavy/react-native-blurhash#cosine-operations\n\t */\n\tstatic clearCosineCache(): void {\n\t\tif (Platform.OS === 'android') BlurhashModule.clearCosineCache();\n\t\telse console.warn('Blurhash.clearCosineCache is only available on Android.');\n\t}\n\n\t/**\n\t * Verifies if the given blurhash is valid by checking it's type, length and size flag.\n\t *\n\t * This uses the JS blurhash decoder, so it might be slow.\n\t * @param blurhash The given blurhash string\n\t */\n\tstatic isBlurhashValid(blurhash: string): ReturnType<typeof isBlurhashValid> {\n\t\treturn isBlurhashValid(blurhash);\n\t}\n\n\t_onLoadStart() {\n\t\tif (this.props.onLoadStart != null) this.props.onLoadStart();\n\t}\n\t_onLoadEnd() {\n\t\tif (this.props.onLoadEnd != null) this.props.onLoadEnd();\n\t}\n\t_onLoadError(event?: NativeSyntheticEvent<{ message?: string }>) {\n\t\tif (this.props.onLoadError != null) this.props.onLoadError(event?.nativeEvent?.message);\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<NativeBlurhashView\n\t\t\t\t{...this.props}\n\t\t\t\tonLoadStart={this._onLoadStart}\n\t\t\t\tonLoadEnd={this._onLoadEnd}\n\t\t\t\t// @ts-expect-error\n\t\t\t\tonLoadError={this._onLoadError}\n\t\t\t/>\n\t\t);\n\t}\n}\n\n// requireNativeComponent automatically resolves 'BlurhashView' to 'BlurhashViewManager'\nconst NativeBlurhashView = requireNativeComponent<BlurhashProps>(\n\t'BlurhashView',\n\t// @ts-expect-error this second argument is still not public, but probably required for TurboModules.\n\tBlurhash,\n);\n"]}